Условия домашки
1. Создать проект с pytest
2. Создать тесты по принципу TDD
3. Тесты должны быть в отдельном файле с использованием фикстур и параметризации

####################################
Задание
Продолжаем работу над проектом. Возникла задача — создать инструменты для эффективной работы с большими объемами данных транзакций, используя возможности Python для обработки данных через генераторы. Эти генераторы должны позволять финансовым аналитикам быстро и удобно находить нужную информацию о транзакциях и проводить анализ данных. Ваша задача — создать модуль
generators, который будет содержать функции для работы с массивами транзакций.

Задачи
Не забудьте, что мы работаем по GitFlow. Необходимо создать новую ветку от актуальной версии ветки разработки и выполнять задания в ней.

Создайте новый модуль в вашем проекте под названием
generators. Этот модуль будет содержать все новые функции, реализующие генераторы для обработки данных.
Создайте функцию
filter_by_currency, которая принимает на вход список словарей, представляющих транзакции.
Функция должна возвращать итератор, который поочередно выдает транзакции, где валюта операции соответствует заданной (например, USD).


Пример использования функции
usd_transactions = filter_by_currency(transactions, "USD")
for _ in range(2):
    print(next(usd_transactions))

>>> {
          "id": 939719570,
          "state": "EXECUTED",
          "date": "2018-06-30T02:08:58.425572",
          "operationAmount": {
              "amount": "9824.07",
              "currency": {
                  "name": "USD",
                  "code": "USD"
              }
          },
          "description": "Перевод организации",
          "from": "Счет 75106830613657916952",
          "to": "Счет 11776614605963066702"
      }
      {
              "id": 142264268,
              "state": "EXECUTED",
              "date": "2019-04-04T23:20:05.206878",
              "operationAmount": {
                  "amount": "79114.93",
                  "currency": {
                      "name": "USD",
                      "code": "USD"
                  }
              },
              "description": "Перевод со счета на счет",
              "from": "Счет 19708645243227258542",
              "to": "Счет 75651667383060284188"
       }

Напишите генератор
transaction_descriptions, который принимает список словарей с транзакциями и возвращает описание каждой операции по очереди.

Пример использования функции
descriptions = transaction_descriptions(transactions)
for _ in range(5):
    print(next(descriptions))

>>> Перевод организации
    Перевод со счета на счет
    Перевод со счета на счет
    Перевод с карты на карту
    Перевод организации

Создайте генератор
card_number_generator
, который выдает номера банковских карт в формате
XXXX XXXX XXXX XXXX
, где
X
 — цифра номера карты. Генератор может сгенерировать номера карт в заданном диапазоне от 0000 0000 0000 0001 до 9999 9999 9999 9999.
Генератор должен принимать начальное и конечное значения для генерации диапазона номеров.


Пример использования функции
for card_number in card_number_generator(1, 5):
    print(card_number)

>>> 0000 0000 0000 0001
    0000 0000 0000 0002
    0000 0000 0000 0003
    0000 0000 0000 0004
    0000 0000 0000 0005

Напишите тесты для нового функционала проекта. Добейтесь покрытия тестами не менее 80% кода.

Примеры тест-кейсов
Тестирование функции
filter_by_currency
:
Напишите тесты, проверяющие, что функция корректно фильтрует транзакции по заданной валюте.
Проверьте, что функция правильно обрабатывает случаи, когда транзакции в заданной валюте отсутствуют.
Убедитесь, что генератор не завершается ошибкой при обработке пустого списка или списка без соответствующих валютных операций.
Тестирование функции
transaction_descriptions
:
Проверьте, что функция возвращает корректные описания для каждой транзакции.
Тестируйте работу функции с различным количеством входных транзакций, включая пустой список.
Тестирование генератора
card_number_generator
:
Напишите тесты, которые проверяют, что генератор выдает правильные номера карт в заданном диапазоне.
Проверьте корректность форматирования номеров карт.
Убедитесь, что генератор корректно обрабатывает крайние значения диапазона и правильно завершает генерацию.
Не забывайте использовать параметризацию и фикстуры в тестах для облегчения написания тестов и улучшения читаемости кода.


Дополните файл
README
 информацией о новом модуле и примерах использования реализованных функций.

Пример входных данных
Для проверки функций
filter_by_currency
 и
transaction_descriptions
:

transactions = (
    [
        {
            "id": 939719570,
            "state": "EXECUTED",
            "date": "2018-06-30T02:08:58.425572",
            "operationAmount": {
                "amount": "9824.07",
                "currency": {
                    "name": "USD",
                    "code": "USD"
                }
            },
            "description": "Перевод организации",
            "from": "Счет 75106830613657916952",
            "to": "Счет 11776614605963066702"
        },
        {
            "id": 142264268,
            "state": "EXECUTED",
            "date": "2019-04-04T23:20:05.206878",
            "operationAmount": {
                "amount": "79114.93",
                "currency": {
                    "name": "USD",
                    "code": "USD"
                }
            },
            "description": "Перевод со счета на счет",
            "from": "Счет 19708645243227258542",
            "to": "Счет 75651667383060284188"
        },
        {
            "id": 873106923,
            "state": "EXECUTED",
            "date": "2019-03-23T01:09:46.296404",
            "operationAmount": {
                "amount": "43318.34",
                "currency": {
                    "name": "руб.",
                    "code": "RUB"
                }
            },
            "description": "Перевод со счета на счет",
            "from": "Счет 44812258784861134719",
            "to": "Счет 74489636417521191160"
        },
        {
            "id": 895315941,
            "state": "EXECUTED",
            "date": "2018-08-19T04:27:37.904916",
            "operationAmount": {
                "amount": "56883.54",
                "currency": {
                    "name": "USD",
                    "code": "USD"
                }
            },
            "description": "Перевод с карты на карту",
            "from": "Visa Classic 6831982476737658",
            "to": "Visa Platinum 8990922113665229"
        },
        {
            "id": 594226727,
            "state": "CANCELED",
            "date": "2018-09-12T21:27:25.241689",
            "operationAmount": {
                "amount": "67314.70",
                "currency": {
                    "name": "руб.",
                    "code": "RUB"
                }
            },
            "description": "Перевод организации",
            "from": "Visa Platinum 1246377376343588",
            "to": "Счет 14211924144426031657"
        }
    ]
)

Типизируйте написанный код и добейтесь того, чтобы
mypy при запуске не выдавал ошибок.